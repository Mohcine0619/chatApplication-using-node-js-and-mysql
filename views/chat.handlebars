<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chat</title>
  <script src="/socket.io/socket.io.js"></script>
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
  <script>
    tailwind.config = {
      darkMode: 'class',
    };

    let socket;

    function initializeSocket() {
      const userId = localStorage.getItem('userId');
      console.log('Retrieved user ID from localStorage:', userId); // Debugging line
      socket = io({
        query: {
          userId: userId
        }
      });

      socket.on('connect', () => {
        socket.emit('storeSocketId', userId);
        localStorage.setItem('socketId', socket.id);
      });

      socket.on('receiveMessage', (data) => {
        console.log('Received message:', data); // Debugging line
        const selectedUserId = document.getElementById('receiverId').value;
        const userId = localStorage.getItem('userId'); // Retrieve the user ID from localStorage
        if (data.senderId === selectedUserId || data.receiverId === selectedUserId) {
          const messageList = document.getElementById('messages');
          const messageItem = document.createElement('li');
          messageItem.classList.add('p-4', 'rounded-lg', 'mb-2', 'max-w-xs', 'break-words', 'shadow-md', 'transition', 'transform', 'hover:scale-105');
          if (data.senderId === userId) {
            messageItem.classList.add('bg-blue-500', 'text-white', 'self-end', 'ml-auto');
          } else {
            messageItem.classList.add('bg-gray-200', 'text-black', 'self-start', 'mr-auto', 'dark:bg-gray-700', 'dark:text-white');
          }
          messageItem.innerHTML = `<div>${data.message}</div>`;
          messageList.appendChild(messageItem);
        }
      });

      socket.on('updateOnlineUsers', (onlineUsers) => {
        console.log('Online users:', onlineUsers);
        document.querySelectorAll('.user-status').forEach(el => {
          const userId = el.dataset.userId;
          if (onlineUsers[userId]) {
            el.classList.add('bg-green-500');
            el.classList.remove('bg-gray-500');
          } else {
            el.classList.add('bg-gray-500');
            el.classList.remove('bg-green-500');
          }
        });
      });
    }

    function sendMessage() {
      const messageInput = document.getElementById('message');
      const receiverId = document.getElementById('receiverId').value;
      const message = messageInput.value;
      const userId = localStorage.getItem('userId');
      const username = '{{user.username}}';
      const timestamp = new Date().toISOString(); // Get the current timestamp
      console.log('Sending message:', { sender: username, senderId: userId, receiverId, message, timestamp }); // Debugging line
      if (receiverId && message) {
        socket.emit('sendMessage', { sender: username, senderId: userId, receiverId, message, timestamp });
        fetch('/chat/messages', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ senderId: userId, receiverId, message, timestamp })
        }).then(response => {
          if (!response.ok) {
            alert('Failed to send message');
          } else {
            const notification = document.getElementById('notification');
            if (notification) {
              console.log('Notification element found:', notification); // Debugging line
              notification.play().then(() => {
                console.log('Notification sound played successfully'); // Debugging line
              }).catch(error => {
                console.error('Error playing notification sound:', error); // Debugging line
              });
            } else {
              console.error('Notification element not found'); // Debugging line
            }
          }
        }).catch(error => {
          console.error('Error:', error);
        });
        messageInput.value = '';
      } else {
        alert('Please select a user and enter a message.');
      }
    }

    function selectUser(userId, username) {
      const loggedInUserId = localStorage.getItem('userId');
      const displayName = (userId === loggedInUserId) ? `Me (${username})` : username;

      document.getElementById('receiverId').value = userId;
      document.getElementById('chatWith').textContent = `Chat with: ${displayName}`;
      document.getElementById('welcomeMessage').classList.add('hidden');
      document.getElementById('chatContainer').classList.remove('hidden');
      localStorage.setItem('selectedUser', JSON.stringify({ userId, username }));

      // Fetch messages for the selected user
      fetch(`/chat/messages/${userId}`)
        .then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.json();
        })
        .then(messages => {
          console.log('Fetched messages:', messages); // Debugging line
          const messageList = document.getElementById('messages');
          messageList.innerHTML = ''; // Clear existing messages
          const currentUserId = localStorage.getItem('userId'); // Retrieve the user ID from localStorage
          messages.forEach(message => {
            const messageItem = document.createElement('li');
            messageItem.classList.add('p-4', 'rounded-lg', 'mb-2', 'max-w-xs', 'break-words', 'shadow-md', 'transition', 'transform', 'hover:scale-105');
            if (String(message.sender_id) === String(currentUserId)) {
              messageItem.classList.add('bg-blue-500', 'text-white', 'self-end', 'ml-auto');
            } else {
              messageItem.classList.add('bg-gray-200', 'text-black', 'self-start', 'mr-auto', 'dark:bg-gray-700', 'dark:text-white');
            }
            const timestamp = new Date(message.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            messageItem.innerHTML = `<div>${message.message}</div><div class="text-xs text-gray-500 dark:text-gray-400">${timestamp}</div>`;
            messageList.appendChild(messageItem);
          });
        })
        .catch(error => console.error('Error fetching messages:', error));
    }

    function loadSelectedUser() {
      const selectedUser = JSON.parse(localStorage.getItem('selectedUser'));
      if (selectedUser) {
        selectUser(selectedUser.userId, selectedUser.username);
      }
      const userId = '{{user.id}}';
      console.log('Logged in user ID:', userId); // Log the logged-in user ID
      localStorage.setItem('userId', userId); // Store the user ID in localStorage
    }

    window.onload = () => {
      loadSelectedUser();
      initializeSocket();
    };

    function toggleDarkMode() {
      document.documentElement.classList.toggle('dark');
    }

    function searchUsers() {
      const searchTerm = document.getElementById('searchUser').value.toLowerCase();
      document.querySelectorAll('.user-item').forEach(item => {
        const username = item.querySelector('.user-name').textContent.toLowerCase();
        if (username.includes(searchTerm)) {
          item.style.display = '';
        } else {
          item.style.display = 'none';
        }
      });
    }

    document.addEventListener('DOMContentLoaded', () => {
      document.getElementById('searchButton').addEventListener('click', searchUsers);
      document.getElementById('searchUser').addEventListener('input', searchUsers);
    });
  </script>
</head>
<body class="bg-gradient-to-r from-gray-100 to-gray-200 dark:from-gray-900 dark:to-gray-800 dark:text-white p-6 font-roboto">
  <audio id="notification" preload="auto">
    <source src="/notification/notif.wav" type="audio/wav">
    <source src="/notification/notif.mp3" type="audio/mpeg">
    <source src="/notification/notif.ogg" type="audio/ogg">
    Your browser does not support the audio element.
  </audio>
  <div class="container mx-auto bg-white dark:bg-gray-800 shadow-2xl rounded-2xl p-10">
    <div class="flex justify-between items-center mb-8">
      <h1 class="text-4xl font-extrabold text-center">Welcome, {{user.username}}</h1>
      <button onclick="toggleDarkMode()" class="bg-gradient-to-r from-gray-300 to-gray-400 dark:from-gray-700 dark:to-gray-800 text-black dark:text-white p-3 rounded-lg shadow-lg hover:from-gray-400 hover:to-gray-500 dark:hover:from-gray-600 dark:hover:to-gray-700">Toggle Dark Mode</button>
    </div>
    <div class="text-right mb-8">
      <a href="/auth/logout" class="text-blue-600 dark:text-blue-400 hover:underline" onclick="socket.disconnect()">Logout</a>
    </div>
    <div class="flex">
      <!-- Users Section -->
      <div class="w-1/3 pr-8 border-r border-gray-300 dark:border-gray-700">
        <h2 class="text-3xl font-semibold mb-8">Users</h2>
        <div class="relative mb-8">
          <input type="text" id="searchUser" placeholder="Search users" class="border border-gray-300 dark:border-gray-600 p-3 w-full rounded bg-white dark:bg-gray-800 text-black dark:text-white">
          <button id="searchButton" class="absolute right-3 top-3">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-500 dark:text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 18a8 8 0 100-16 8 8 0 000 16zm6-2l4 4" />
            </svg>
          </button>
        </div>
        <ul id="userList" class="space-y-4">
          {{#each users}}
            <li class="user-item flex items-center p-4 bg-gray-100 dark:bg-gray-700 rounded-lg shadow-md hover:bg-gray-200 dark:hover:bg-gray-600 transition">
              <img src="https://api.multiavatar.com/{{this.id}}.svg" alt="Profile Picture" class="w-12 h-12 rounded-full">
              <div class="ml-4 flex-grow">
                <a href="#" onclick="selectUser('{{this.id}}', '{{this.username}}')" class="user-name text-lg font-semibold text-blue-600 dark:text-blue-400 hover:underline">
                  {{#if (eq this.id ../user.id)}}Me ({{this.username}}){{else}}{{this.username}}{{/if}}
                </a>
              </div>
              <span class="w-4 h-4 rounded-full {{#if this.online}}bg-green-500{{else}}bg-gray-500{{/if}} user-status" data-user-id="{{this.id}}"></span>
            </li>
          {{/each}}
        </ul>
      </div>
      <!-- Chat Section -->
      <div class="w-5/6 pl-8 flex flex-col ">
        <div id="welcomeMessage" class="text-center text-gray-500 dark:text-gray-4000">
          Welcome, {{user.username}}! Please choose someone to talk to.
        </div>
        <div id="chatContainer" class="hidden">
          <h2 id="chatWith" class="text-3xl font-semibold mb-8">Chat</h2>
          <ul id="messages" class="flex flex-col space-y-4 mb-8 h-96 overflow-y-auto bg-gray-50 dark:bg-gray-700 p-6 border border-gray-300 dark:border-gray-600 rounded">
            {{#each messages}}
              <li class="p-4 rounded-lg mb-2 max-w-xs break-words shadow-md transition transform hover:scale-105 {{#if (eq this.sender_id ../user.id)}}bg-blue-500 text-white self-end ml-auto{{else}}bg-gray-200 text-black self-start mr-auto dark:bg-gray-700 dark:text-white{{/if}}">
                <div>{{this.message}}</div>
                <div class="text-xs text-gray-500 dark:text-gray-400">{{this.timestamp}}</div>
              </li>
            {{/each}}
          </ul>
          <input type="hidden" id="receiverId">
          <div class="flex items-center bg-gray-100 dark:bg-gray-700 p-4 rounded-lg shadow-md">
            <input type="text" id="message" placeholder="Type a message" class="border border-gray-300 dark:border-gray-600 p-3 flex-grow mr-3 rounded bg-white dark:bg-gray-800 text-black dark:text-white">
            <button onclick="sendMessage()" class="bg-gradient-to-r from-blue-500 to-blue-600 text-white p-3 rounded hover:from-blue-600 hover:to-blue-700">Send</button>
          </div>
        </div>
      </div>
    </div>
  </div>
</body>
</html>