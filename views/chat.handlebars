<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chat</title>
  <script src="/socket.io/socket.io.js"></script>
  <script src="https://cdn.tailwindcss.com"></script>
  <script>
    tailwind.config = {
      darkMode: 'class',
    };

    let socket;

    function initializeSocket() {
      const userId = localStorage.getItem('userId');
      console.log('Retrieved user ID from localStorage:', userId); // Debugging line
      socket = io({
        query: {
          userId: userId
        }
      });

      socket.on('connect', () => {
        socket.emit('storeSocketId', userId);
        localStorage.setItem('socketId', socket.id);
      });

      socket.on('receiveMessage', (data) => {
        console.log('Received message:', data); // Debugging line
        const selectedUserId = document.getElementById('receiverId').value;
        const userId = localStorage.getItem('userId'); // Retrieve the user ID from localStorage
        if (data.senderId === selectedUserId || data.receiverId === selectedUserId) {
          const messageList = document.getElementById('messages');
          const messageItem = document.createElement('li');
          messageItem.classList.add('p-2', 'rounded', 'mb-2', 'max-w-xs', 'break-words');
          if (data.senderId === userId) {
            messageItem.classList.add('bg-blue-500', 'text-white', 'self-end', 'ml-auto');
          } else {
            messageItem.classList.add('bg-gray-200', 'text-black', 'self-start', 'mr-auto', 'dark:bg-gray-700', 'dark:text-white');
          }
          messageItem.textContent = data.message;
          messageList.appendChild(messageItem);
        }
      });
    }

    function sendMessage() {
      const messageInput = document.getElementById('message');
      const receiverId = document.getElementById('receiverId').value;
      const message = messageInput.value;
      const userId = localStorage.getItem('userId');
      const username = '{{user.username}}';
      console.log('Sending message:', { sender: username, senderId: userId, receiverId, message }); // Debugging line
      if (receiverId && message) {
        socket.emit('sendMessage', { sender: username, senderId: userId, receiverId, message });
        fetch('/chat/messages', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ senderId: userId, receiverId, message })
        }).then(response => {
          if (!response.ok) {
            alert('Failed to send message');
          }
        }).catch(error => {
          console.error('Error:', error);
        });
        messageInput.value = '';
      } else {
        alert('Please select a user and enter a message.');
      }
    }

    function selectUser(userId, username) {
      document.getElementById('receiverId').value = userId;
      document.getElementById('chatWith').textContent = `Chat with: ${username}`;
      document.getElementById('welcomeMessage').classList.add('hidden');
      document.getElementById('chatContainer').classList.remove('hidden');
      localStorage.setItem('selectedUser', JSON.stringify({ userId, username }));

      // Fetch messages for the selected user
      fetch(`/chat/messages/${userId}`)
        .then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.json();
        })
        .then(messages => {
          console.log('Fetched messages:', messages); // Debugging line
          const messageList = document.getElementById('messages');
          messageList.innerHTML = ''; // Clear existing messages
          const currentUserId = localStorage.getItem('userId'); // Retrieve the user ID from localStorage
          messages.forEach(message => {
            const messageItem = document.createElement('li');
            messageItem.classList.add('p-2', 'rounded', 'mb-2', 'max-w-xs', 'break-words');
            if (String(message.sender_id) === String(currentUserId)) {
              messageItem.classList.add('bg-blue-500', 'text-white', 'self-end', 'ml-auto');
            } else {
              messageItem.classList.add('bg-gray-200', 'text-black', 'self-start', 'mr-auto', 'dark:bg-gray-700', 'dark:text-white');
            }
            messageItem.textContent = message.message;
            messageList.appendChild(messageItem);
          });
        })
        .catch(error => console.error('Error fetching messages:', error));
    }

    function loadSelectedUser() {
      const selectedUser = JSON.parse(localStorage.getItem('selectedUser'));
      if (selectedUser) {
        selectUser(selectedUser.userId, selectedUser.username);
      }
      const userId = '{{user.id}}';
      console.log('Logged in user ID:', userId); // Log the logged-in user ID
      localStorage.setItem('userId', userId); // Store the user ID in localStorage
    }

    window.onload = () => {
      loadSelectedUser();
      initializeSocket();
    };

    function toggleDarkMode() {
      document.documentElement.classList.toggle('dark');
    }
  </script>
</head>
<body class="bg-gray-100 dark:bg-gray-900 dark:text-white p-4">
  <div class="container mx-auto bg-white dark:bg-gray-800 shadow-lg rounded-lg p-6">
    <div class="flex justify-between items-center mb-4">
      <h1 class="text-3xl font-bold text-center">Welcome, {{user.username}}</h1>
      <button onclick="toggleDarkMode()" class="bg-gray-300 dark:bg-gray-700 text-black dark:text-white p-2 rounded">Toggle Dark Mode</button>
    </div>
    <div class="text-right mb-4">
      <a href="/auth/logout" class="text-blue-500 dark:text-blue-300 hover:underline" onclick="socket.disconnect()">Logout</a>
    </div>
    <div class="flex">
      <!-- Users Section -->
      <div class="w-1/3 pr-4 border-r border-gray-300 dark:border-gray-700">
        <h2 class="text-2xl font-semibold mb-4">Users</h2>
        <ul class="list-disc pl-5 space-y-2">
          {{#each users}}
            <li><a href="#" onclick="selectUser('{{this.id}}', '{{this.username}}')" class="text-blue-500 dark:text-blue-300 hover:underline">{{this.username}}</a></li>
          {{/each}}
        </ul>
      </div>
      <!-- Chat Section -->
      <div class="w-2/3 pl-4">
        <div id="welcomeMessage" class="text-center text-gray-500 dark:text-gray-400">
          Welcome, {{user.username}}! Please choose someone to talk to.
        </div>
        <div id="chatContainer" class="hidden">
          <h2 id="chatWith" class="text-2xl font-semibold mb-4">Chat</h2>
          <ul id="messages" class="flex flex-col space-y-2 mb-4 h-64 overflow-y-auto bg-gray-50 dark:bg-gray-700 p-4 border border-gray-300 dark:border-gray-600 rounded">
            {{#each messages}}
              <li class="p-2 rounded max-w-xs break-words {{#if (eq this.sender_id ../user.id)}}bg-blue-500 text-white self-end ml-auto{{else}}bg-gray-200 text-black self-start mr-auto dark:bg-gray-700 dark:text-white{{/if}}">
                {{this.message}}
              </li>
            {{/each}}
          </ul>
          <input type="hidden" id="receiverId">
          <div class="flex items-center">
            <input type="text" id="message" placeholder="Type a message" class="border border-gray-300 dark:border-gray-600 p-2 flex-grow mr-2 rounded bg-white dark:bg-gray-800 text-black dark:text-white">
            <button onclick="sendMessage()" class="bg-blue-500 text-white p-2 rounded hover:bg-blue-600">Send</button>
          </div>
        </div>
      </div>
    </div>
  </div>
</body>
</html>